#!/bin/bash

workdir=$(pwd)
arg="${1}"

usage()
{
    echo "Usage: ${0} build|reload|clean|start|stop\n"
    echo "   See further details running '${0} help'\n" 
    exit 2
}

help()
{
    echo "${0} - a tool to manage dockers containers in Datum Analitica infrastructure\n"
    echo ""
    echo "     Usage: ${0} build|reload|clean|start|stop\n\n"
    echo "   - build:  build a brand new fresh docker cluster. Can be used for"
    echo "             a new rebuild. This is a disruptive operation\n"
    echo "   - reload: refresh containers' configurations, just start build from"
    echo "             first change. Use more cache as possible. This is"
    echo "             generally a non disruptive operation\n"
    echo "   - start,"
    echo "     stop:   start/stop containers. Keep them resumable.\n"
    echo "   - clean:  remove conatiners and images from host machine\n\n"
    exit 0
}

check()
{
    if [  -n $(docker ps -a -q) && $arg -eq "build"  ]; then
        echo "there are running containers, maybe you want to 'reload'?"
        exit 2;
    fi
    if [  -z $(docker ps -a -q) && $arg -eq "clean"  ]; then
        echo "there's nothing to clean, exiting"
	exit 1;
    fi
    if [  -z $(docker ps -a -q) && $arg -eq "reload"  ]; then
        echo "there's nothing to reload, exiting"
        exit 1;
    fi
    if [  -z $(docker ps -a -q) && $arg -eq "start" || $arg -eq "stop"  ]; then
        echo "no built and running docker containers, exiting"
        exit 1;
    fi
}

clean()
{
    echo "cleaning all (containers and images)..."
    docker stop client
    docker stop postgresql
    docker stop web
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -a -q)
    echo ""
    echo "   done!\n\n"
}

build()
{
    echo "Searching Dockerfile's in "
    echo "  - ${workdir}/postgresql"
    echo "  - ${workdir}/client"    
    echo ""
    echo "building images..."
    docker build -t postgresql --no-cache --rm --file $workdir/postgresql/Dockerfile .
    docker run -t -d --name postgresql --hostname postgresql postgresql
    docker build -t client --no-cache --rm --file $workdir/client/Dockerfile .
    docker run -t -d --name client --hostname client --link postgresql:postgres client
    docker build -t web --no-cache --rm --file $workdir/web/Dockerfile .
    docker run -t -d --name web -p 5000:5000 --hostname web --link postgresql:postgres web
    echo ""
    echo "$(docker ps -a)\n\n"
}

reload()
{
    echo "Searching Dockerfile's in "
    echo "  - ${workdir}/postgresql"
    echo "  - ${workdir}/client\n"
    echo "  - ${workdir}/web\n"
    echo ""
    echo "reloading images..."
    docker build -t postgresql --rm --file $workdir/postgresql/Dockerfile .
    docker run -t -d --name postgresql --hostname postgresql postgresql:latest
    docker build -t client --rm --file $workdir/client/Dockerfile .
    docker run -t -d --name client --hostname client --link postgresql:postgres client:latest
    docker build -t web --rm --file $workdir/web/Dockerfile .
    docker run -t -d --name web -p 5000:5000 --hostname web --link postgresql:postgres web
    echo ""
    echo "$(docker ps -a)\n\n"
}

stop()
{
    echo "stop docker containers..."
    docker stop client
    docker stop postgresql
    echo "    done!\n\n"
}

start()
{
    echo "start docker containers..."
    docker start postgresql
    docker start client
    echo "   done!\n\n"
}

case "${arg}" in
     start)
        check
        start
        ;;
     stop)
        check
        stop
        ;;
     reload)
        check
        reload
        ;;
     build)
        check
        build
        ;;
     clean)
        check
        clean
        ;;
     help)
	help
	;;
     *)
        usage
esac

exit 0
